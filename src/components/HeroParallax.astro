---
import { Image } from '@astrojs/image/components';
import Present from '../../public/images/header_elements/present.png';
import Bell from '../../public/images/header_elements/bell.png';
import Cursor from '../../public/images/header_elements/cursor.png';
import Hat from '../../public/images/header_elements/hat.png';
import Keyboard from '../../public/images/header_elements/keyboard.png';
import Sock from '../../public/images/header_elements/sock.png';
import Sleigh from '../../public/images/header_elements/sleigh.png';
// import Orientation from '../../public/images/header_elements/untitled.png'
---

<div class="parallax-container">
  <!-- This is just to be able to approximate the layout of the elements -->
  <!-- <Image
		src={Orientation}
		class='sock'
		alt=''
		style='position: absolute; z-index:5; opacity: .3; scale: 1.2; translate: 0% 0%;'
	/> -->
  <div class="header-composition">
    <Image src={Sleigh} class="sleigh parallax-asset" alt="" width={420} />
    <Image src={Present} class="present parallax-asset" alt="" height={306} />
    <Image src={Bell} class="bell parallax-asset" alt="" height={120} />
    <Image src={Cursor} class="cursor parallax-asset" alt="" height={125} />
    <Image src={Hat} class="hat parallax-asset" alt="" height={113} />
    <Image src={Keyboard} class="keyboard parallax-asset" alt="" height={170} />
    <Image src={Sock} class="sock parallax-asset" alt="" height={190} />
  </div>
</div>

<script>
  import { timeline } from 'motion';

  var images = document.querySelectorAll('.parallax-asset');
  // turn node list 'images' to an array
  var imagesArr = Array.prototype.slice.call(images);

  function checkLoaded() {
    if (imagesArr.every((img) => img.complete)) {
      const sequence = [
        [
          '.parallax-asset',
          { visibility: 'visible', opacity: 1 },
          { duration: 0.6 },
        ],
        ['.sleigh', { opacity: 'calc(1 - var(--scroll) / 2)' }],
      ];
      timeline(sequence);
    }
  }

  checkLoaded();
  imagesArr.forEach((img) => img.addEventListener('load', checkLoaded));

  window.addEventListener('DOMContentLoaded', () => {
    if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      if (window.matchMedia('(pointer:fine)').matches) {
        document.addEventListener('mousemove', (event) => {
          document.documentElement.style.setProperty(
            '--mouseX',
            (event.pageX / window.innerWidth - 0.25).toString()
          );
          document.documentElement.style.setProperty(
            '--mouseY',
            (event.pageY / window.innerHeight - 0.25).toString()
          );
        });
      }
      document.addEventListener('scroll', () => {
        document.documentElement.style.setProperty(
          '--scroll',
          (window.scrollY / window.innerHeight).toString()
        );
      });

      // Set initial value or it doesn't work until you scroll
      document.documentElement.style.setProperty('--scroll', '0');
    }
  });
</script>

<style lang="scss">
  @import 'src/styles/mixins.scss';

  .parallax-container {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    height: 100%;
    max-width: 100%;
  }

  .parallax-asset {
    opacity: 0;
    visibility: hidden;
  }

  .header-composition {
    width: calc(100% + 2 * var(--space-s));
    height: 54ch;
    display: block;
    margin: -5vh 0 -4vh;
    translate: -10% 0;

    @media (min-width: 640px) {
      translate: none;
    }

    @media (min-width: 1024px) {
      margin-top: 0;
    }

    @media (prefers-reduced-motion: reduce) {
      translate: none;
      margin: -15% 0;
    }

    position: relative;
    > * {
      position: absolute;
      pointer-events: none;

      @media (max-width: 640px) {
        overflow-x: auto;
        scale: 70%;
      }
    }
    .sleigh {
      left: -12vw;
      top: -20%;
      @include headerElementParallax(-0.5);
      filter: blur(calc(var(--scroll) * 4px));
      // opacity: calc(1 - var(--scroll) / 2); //Moved this to timeline
    }
    .present {
      top: 14.5%;
      left: 15%;
      z-index: 1;
      @include headerElementParallax(0.5);
    }
    .bell {
      top: 65%;
      left: 25%;
      @include headerElementParallax(0.25);
    }
    .cursor {
      top: 58%;
      left: 61%;
      z-index: 2;
      @include headerElementParallax(0.8);
    }
    .hat {
      top: 32%;
      left: 64%;
      @include headerElementParallax(0.3);
    }
    .keyboard {
      top: -3%;
      left: 40%;
      @include headerElementParallax(0.6);
    }
    .sock {
      top: 24%;
      left: -2%;
      @include headerElementParallax(0.4);
    }
  }
</style>

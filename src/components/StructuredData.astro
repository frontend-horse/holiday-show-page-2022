---
import type {
  DonateAction,
  Event,
  NGO,
  Organization,
  Person,
  WithContext,
} from 'schema-dts';
import * as prismicH from '@prismicio/helpers';
import { getAllGuests, getAllSponsors, getHomepage } from '../lib/prismicio';

const imageUrl = new URL('/images/cover.jpg', Astro.url);
const page = await getHomepage();
const description = prismicH.asText(page.data.body);

const alex: Person = {
  '@type': 'Person',
  name: 'Alex Trost',
  url: 'https://frontend.horse',
  image: 'https://avatars.githubusercontent.com/u/19617280?v=4',
  sameAs: [
    'https://twitter.com/TrostCodes',
    'https://notacult.social/@TrostCodes',
    'https://trost.codes',
  ],
  jobTitle: 'Developer Experience Team Lead',
  worksFor: {
    '@type': 'Organization',
    name: 'Prismic',
  },
};

const allGuests = await getAllGuests();
const guests = allGuests.map((guest) => {
  const socialLinks = [guest.data.twitterUrl, guest.data.mastadonUrl].filter(
    (url) => !!url
  );

  const structuredGuestData: Person = {
    '@type': 'Person',
    name: guest.data.name,
    url: guest.data.websiteUrl,
    image: guest.data.avatar?.url,
    sameAs: socialLinks.length ? socialLinks : undefined,
    jobTitle: guest.data.jobTitle,
    worksFor: guest.data.company
      ? { '@type': 'Organization', name: guest.data.company }
      : undefined,
  };

  // Remove falsy values
  Object.keys(structuredGuestData).forEach(
    (key) => structuredGuestData[key] == null && delete structuredGuestData[key]
  );

  return structuredGuestData;
});

const allSponsors = await getAllSponsors();
const sponsors = allSponsors.map((sponsor) => {
  const structuredSponsorData: Organization = {
    '@type': 'Organization',
    name: sponsor.data.name,
    logo: sponsor.data.logo?.url,
    description: prismicH.asText(sponsor.data.description),
    url: prismicH.isFilled.link(sponsor.data.ctalink)
      ? sponsor.data.ctalink?.url
      : undefined,
  };

  Object.keys(structuredSponsorData).forEach(
    (key) =>
      structuredSponsorData[key] == null && delete structuredSponsorData[key]
  );

  return structuredSponsorData;
});

const doctorsWithoutBorders: NGO = {
  '@type': 'NGO',
  legalName: 'Médecins Sans Frontières',
  name: 'Doctors Without Borders',
  logo: 'https://upload.wikimedia.org/wikipedia/en/thumb/b/bd/Msf_logo.svg/2880px-Msf_logo.svg.png',
  url: 'https://www.doctorswithoutborders.org/',
  taxID: '13-3433452',
  sameAs: [
    'https://twitter.com/msf_usa',
    'http://www.facebook.com/msf.english',
    'http://www.youtube.com/msf',
    'http://www.instagram.com/doctorswithoutborders',
  ],
  email: 'program_inquiries@newyork.msf.org',
};

const donateAction: DonateAction = {
  '@type': 'DonateAction',
  recipient: doctorsWithoutBorders,
};

const schema: WithContext<Event> = {
  '@context': 'https://schema.org',
  '@type': 'Event',
  name: '2nd Annual Holiday Snowtacular',
  description,
  image: imageUrl.toString(),
  startDate: '2022-12-16T12:00-05:00',
  endDate: '2022-12-16T16:00-05:00',
  eventStatus: 'https://schema.org/EventScheduled',
  eventAttendanceMode: 'https://schema.org/OnlineEventAttendanceMode',
  location: {
    '@type': 'VirtualLocation',
    url: 'https://twitch.tv/TrostCodes',
  },
  organizer: alex,
  performer: [alex, ...guests],
  sponsor: sponsors,
  isAccessibleForFree: true,
  potentialAction: donateAction,
};
---

<script type="application/ld+json" set:html={JSON.stringify(schema)}></script>
